import React, { createContext, useContext, useState, useEffect } from 'react';
import { authAPI } from '../services/api';
import { useToast } from '../hooks/use-toast';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const { toast } = useToast();\n\n  // Load user from localStorage on mount\n  useEffect(() => {\n    const token = localStorage.getItem('access_token');\n    const userData = localStorage.getItem('user_data');\n    \n    if (token && userData) {\n      try {\n        setUser(JSON.parse(userData));\n      } catch (error) {\n        console.error('Error parsing user data:', error);\n        localStorage.removeItem('access_token');\n        localStorage.removeItem('user_data');\n      }\n    }\n    \n    setLoading(false);\n  }, []);\n\n  const login = async (credentials) => {\n    try {\n      const response = await authAPI.login(credentials);\n      const { access_token, user: userData } = response.data;\n      \n      localStorage.setItem('access_token', access_token);\n      localStorage.setItem('user_data', JSON.stringify(userData));\n      setUser(userData);\n      \n      toast({\n        title: \"Welcome back!\",\n        description: `Successfully logged in as ${userData.username}`,\n      });\n      \n      return { success: true };\n    } catch (error) {\n      const message = error.response?.data?.detail || 'Login failed';\n      toast({\n        title: \"Login failed\",\n        description: message,\n        variant: \"destructive\",\n      });\n      return { success: false, error: message };\n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      const response = await authAPI.register(userData);\n      const { access_token, user: newUser } = response.data;\n      \n      localStorage.setItem('access_token', access_token);\n      localStorage.setItem('user_data', JSON.stringify(newUser));\n      setUser(newUser);\n      \n      toast({\n        title: \"Welcome to StatusXSmoakland!\",\n        description: `Account created successfully for ${newUser.username}`,\n      });\n      \n      return { success: true };\n    } catch (error) {\n      const message = error.response?.data?.detail || 'Registration failed';\n      toast({\n        title: \"Registration failed\",\n        description: message,\n        variant: \"destructive\",\n      });\n      return { success: false, error: message };\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await authAPI.logout();\n    } catch (error) {\n      // Continue with logout even if API call fails\n      console.error('Logout API error:', error);\n    }\n    \n    localStorage.removeItem('access_token');\n    localStorage.removeItem('user_data');\n    setUser(null);\n    \n    toast({\n      title: \"Logged out\",\n      description: \"You have been successfully logged out\",\n    });\n  };\n\n  const updateProfile = async (updates) => {\n    try {\n      const response = await authAPI.updateProfile(updates);\n      const updatedUser = response.data;\n      \n      localStorage.setItem('user_data', JSON.stringify(updatedUser));\n      setUser(updatedUser);\n      \n      toast({\n        title: \"Profile updated\",\n        description: \"Your profile has been updated successfully\",\n      });\n      \n      return { success: true };\n    } catch (error) {\n      const message = error.response?.data?.detail || 'Profile update failed';\n      toast({\n        title: \"Update failed\",\n        description: message,\n        variant: \"destructive\",\n      });\n      return { success: false, error: message };\n    }\n  };\n\n  const value = {\n    user,\n    loading,\n    login,\n    register,\n    logout,\n    updateProfile,\n    isAuthenticated: !!user,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};"